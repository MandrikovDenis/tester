import { NextResponse } from 'next/server';
import { Builder, By, until } from 'selenium-webdriver';
import chrome from 'selenium-webdriver/chrome';
import { saveTestResult } from '@/lib/logStore';
import crypto from 'crypto';
import path from 'path';

export async function POST(req: Request) {
  const { url } = await req.json();

  if (!url) {
    return NextResponse.json({ error: 'No URL provided' }, { status: 400 });
  }

  const logs: string[] = [];
  const testId = crypto.randomUUID();

  // –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ chromedriver.exe
  const chromeDriverPath = 'C:\\Users\\mdyu2\\Desktop\\–î–∏–ø–ª–æ–º\\tester-master\\node_modules\\chromedriver\\lib\\chromedriver\\chromedriver.exe'; // –ø—É—Ç—å –∫ –¥—Ä–∞–π–≤–µ—Ä—É
  
  const options = new chrome.Options();
  options.addArguments('--disable-gpu', '--no-sandbox'); // –±–µ–∑ headless —Ä–µ–∂–∏–º–∞

  const service = new chrome.ServiceBuilder(chromeDriverPath);

  let driver;

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏
  const sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));

  try {
    driver = await new Builder()
      .forBrowser('chrome')
      .setChromeOptions(options)
      .setChromeService(service) // —É–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä—É—á–Ω—É—é —Å–µ—Ä–≤–∏—Å
      .build();

    logs.push('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞...');
    await driver.get(url);
    logs.push('‚úÖ –°–∞–π—Ç –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ.');

    // –ó–∞–¥–µ—Ä–∂–∫–∞ 2 —Å–µ–∫—É–Ω–¥—ã
    await sleep(2000);

    logs.push('üîê –¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
    const loginInput = await driver.findElement(By.name('email'));
    const passwordInput = await driver.findElement(By.name('password'));
    const loginButton = await driver.findElement(By.css('button[type="submit"]'));

    await loginInput.sendKeys('test@example.com');
    await passwordInput.sendKeys('password123');
    await loginButton.click();

    // –ó–∞–¥–µ—Ä–∂–∫–∞ 2 —Å–µ–∫—É–Ω–¥—ã
    await sleep(2000);

    await driver.wait(until.urlContains('dashboard'), 5000);
    logs.push('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.');

    // –ó–∞–¥–µ—Ä–∂–∫–∞ 2 —Å–µ–∫—É–Ω–¥—ã
    await sleep(2000);

    logs.push('üìÑ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ñ–æ—Ä–º—ã...');
    const formLink = await driver.findElement(By.linkText('–§–æ—Ä–º–∞'));
    await formLink.click();

    await driver.wait(until.urlContains('form'), 5000);
    logs.push('‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –ø—Ä–æ—à—ë–ª —É—Å–ø–µ—à–Ω–æ.');

    // –ó–∞–¥–µ—Ä–∂–∫–∞ 2 —Å–µ–∫—É–Ω–¥—ã
    await sleep(2000);

    logs.push('üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º—ã...');
    const nameInput = await driver.findElement(By.name('name'));
    const messageInput = await driver.findElement(By.name('message'));
    await nameInput.sendKeys('Test Name');
    await messageInput.sendKeys('Test Message');

    // –ó–∞–¥–µ—Ä–∂–∫–∞ 2 —Å–µ–∫—É–Ω–¥—ã
    await sleep(2000);

    logs.push('‚úÖ –§–æ—Ä–º–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.');

    saveTestResult(testId, { status: 'success', logs });

    return NextResponse.json({ status: 'success', logs, testId });

  } catch (error: any) {
    logs.push(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    saveTestResult(testId, { status: 'fail', logs });

    return NextResponse.json({ status: 'fail', logs, testId }, { status: 500 });

  } finally {
    if (driver) await driver.quit();
  }
}
