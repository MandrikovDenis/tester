import { NextResponse } from 'next/server';
import { Builder, By, until } from 'selenium-webdriver';
import chrome from 'selenium-webdriver/chrome';
import { saveTestResult } from '@/lib/logStore';
import crypto from 'crypto';
import path from 'path';

export async function POST(req: Request) {
  const { url } = await req.json();

  if (!url) {
    return NextResponse.json({ error: 'No URL provided' }, { status: 400 });
  }

  const logs: string[] = [];
  const testId = crypto.randomUUID();

  // –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ chromedriver.exe
  const chromeDriverPath = 'C:\\Users\\mdyu2\\Desktop\\–î–∏–ø–ª–æ–º\\tester-master\\node_modules\\chromedriver\\lib\\chromedriver\\chromedriver.exe'; // –ø—É—Ç—å –∫ –¥—Ä–∞–π–≤–µ—Ä—É
  
  const options = new chrome.Options();
  options.addArguments('--disable-gpu', '--no-sandbox'); // –±–µ–∑ headless —Ä–µ–∂–∏–º–∞

  const service = new chrome.ServiceBuilder(chromeDriverPath);

  let driver;

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏
  const sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));

  try {
    driver = await new Builder()
      .forBrowser('chrome')
      .setChromeOptions(options)
      .setChromeService(service) 
      .build();

    logs.push('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞...');
    await driver.get(url);
    logs.push('‚úÖ –°–∞–π—Ç –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ.');

    // –ó–∞–¥–µ—Ä–∂–∫–∞ 2 —Å–µ–∫—É–Ω–¥—ã
    await sleep(2000);

    logs.push('üîê –¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
    let loginInput = await driver.findElement(By.name('email'));
    let passwordInput = await driver.findElement(By.name('password'));
    let loginButton = await driver.findElement(By.css('button[type="submit"]'));

    const loginTests = [
      { email: 'invalid@example.com', password: 'password123', expectedSuccess: false },
      { email: 'test@example.com', password: 'wrongpass', expectedSuccess: false },
      { email: 'test@example.com', password: `' OR 1=1 --`, expectedSuccess: false },
      { email: 'test@example.com', password: '<script>', expectedSuccess: false },
      { email: 'test@example.com', password: 'password123', expectedSuccess: true },
    ];

    let loginSuccess = false; // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞

    for (const test of loginTests) {
      logs.push(`üîê –ü—Ä–æ–±—É–µ–º –ª–æ–≥–∏–Ω: ${test.email} / ${test.password}`);

      await loginInput.clear();
      await passwordInput.clear();
      await loginInput.sendKeys(test.email);
      await passwordInput.sendKeys(test.password);
      await loginButton.click();
      await sleep(1000);

      const currentUrl = await driver.getCurrentUrl();

      if (test.expectedSuccess) {
        await driver.wait(until.urlContains('/dashboard'), 3000);
        logs.push('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –ø—Ä–æ—à—ë–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
        loginSuccess = true; // –£—Å–ø–µ—à–Ω—ã–π –ª–æ–≥–∏–Ω
        break; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª, —Ç–∞–∫ –∫–∞–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
      } else {
        await sleep(1000); // –ü–æ–¥–æ–∂–¥–∞—Ç—å, —á—Ç–æ –Ω–µ –±—ã–ª–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
        const currentUrl = await driver.getCurrentUrl();
        if (!currentUrl.includes('/dashboard')) {
          logs.push('‚úÖ –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.');
        } else {
          logs.push('‚ùå –û—à–∏–±–∫–∞: –±—ã–ª –ø–µ—Ä–µ—Ö–æ–¥ –ø—Ä–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.');
        }
      }

      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
      await driver.get(url);
      await sleep(1000);

      // –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞)
      loginInput = await driver.findElement(By.name('email'));
      passwordInput = await driver.findElement(By.name('password'));
      loginButton = await driver.findElement(By.css('button[type="submit"]'));
    }

    if (!loginSuccess) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏');
    }

    // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ /dashboard
    await driver.wait(until.urlContains('dashboard'), 5000);
    logs.push('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.');

    // –ó–∞–¥–µ—Ä–∂–∫–∞ 2 —Å–µ–∫—É–Ω–¥—ã
    await sleep(2000);

    logs.push('üìÑ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ñ–æ—Ä–º—ã...');
    const formLink = await driver.findElement(By.linkText('–§–æ—Ä–º–∞'));
    await formLink.click();

    await driver.wait(until.urlContains('form'), 5000);
    logs.push('‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –ø—Ä–æ—à—ë–ª —É—Å–ø–µ—à–Ω–æ.');

    // –ó–∞–¥–µ—Ä–∂–∫–∞ 2 —Å–µ–∫—É–Ω–¥—ã
    await sleep(2000);

    logs.push('üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º—ã...');
    const nameInput = await driver.findElement(By.name('name'));
    const messageInput = await driver.findElement(By.name('message'));
    await nameInput.sendKeys('Test Name');
    await messageInput.sendKeys('Test Message');

    // –ó–∞–¥–µ—Ä–∂–∫–∞ 2 —Å–µ–∫—É–Ω–¥—ã
    await sleep(2000);

    logs.push('‚úÖ –§–æ—Ä–º–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.');

    saveTestResult(testId, { status: 'success', logs });

    return NextResponse.json({ status: 'success', logs, testId });

  } catch (error: any) {
    logs.push(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    saveTestResult(testId, { status: 'fail', logs });

    return NextResponse.json({ status: 'fail', logs, testId }, { status: 500 });

  } finally {
    if (driver) await driver.quit();
  }
}
